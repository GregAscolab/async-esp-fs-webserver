<!DOCTYPE html>
<html>
<head>
  <meta http-equiv="Content-type" content="text/html; charset=utf-8">
  <title>ESP withWebSocket.ino</title>
  <!-- Cyustom page styling -->
  <style>
    html {
      background-color: #92938fd1
    }
    .container {
      display: flex;
      justify-content: center;
      min-height: calc(100vh - 6rem);
      padding: 1rem 0;

    }
    .container {
      max-width: 860px;
      padding: 40px;
    }
  </style>

</head>
  <body id="index">
    <main class="container">
      <article class="grid">
        <div>
          <hgroup>
            <h1>ESP FS WebServer - LED Switcher</h1>
          </hgroup>
          <label for="remember">
            <input type="checkbox" role="switch" id="toggle-led" name="toggle-led" >
            Toggle built-in LED
          </label>
          <br>
          <p id="esp-response"></p>
          <img src="espressif.jpg" style="opacity: 0.75"/>
          <br><br>
          <p>ESP current time, sync with NTP server and sent to this client via <a href="https://developer.mozilla.org/en-US/docs/Web/API/WebSockets_API/">WebSocket!</a></p>
          <h4 id='esp-time'></h4>
        </div>
      </article>
    </main>

    <script type="text/javascript">
      function ws_connect() {
        var ws = new WebSocket('ws://'+document.location.host+'/ws',['arduino']);
        ws.onopen = function() { ws.send('Connected - ' + new Date());};
        ws.onmessage = function(e) {
          parseMessage(e.data);
        };
        ws.onclose = function(e) {
            setTimeout(function() {
            ws_connect();
            }, 1000);
        };
        ws.onerror = function(err) {
            ws.close();
        };
      }

	    // Parse messages receveid via websocket
      function parseMessage(msg) {
        try {
          const obj = JSON.parse(msg);
          if (typeof obj === 'object' && obj !== null) {
            if (obj.esptime !== null) {
              var date = new Date(0); // The 0 sets the date to epoch
              if( date.setUTCSeconds(obj.esptime))
                document.getElementById("esp-time").innerHTML = date;
            }
          }
        } catch {
          console.log('Error on parse message ' + msg);
        }
      }

      // This function fetch the GET request to the ESP webserver
      function toggleLed() {
        const pars = new URLSearchParams({
          val:  document.getElementById('toggle-led').checked ? '1' : '0'
        });

        fetch('/led?' + pars )                // Do the request
        .then(response => response.text())    // Parse the response
        .then(text => {                       // DO something with response
          console.log(text);
          document.getElementById('esp-response').innerHTML = text + ' <i>(Builtin LED is ON with a low signal)</i>';
        });
      }

      // Start a websocket client and set event callback functions
      ws_connect();

      // Add event listener to the LED checkbox (the function will be called on every change)
      document.getElementById('toggle-led').addEventListener('change', toggleLed );
    </script>

  </body>
</html>

